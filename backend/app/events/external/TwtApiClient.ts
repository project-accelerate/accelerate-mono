import { Service } from "typedi";
import { RepositoryCache } from "app/common/RepositoryCache";

// Generated by https://quicktype.io

export interface TwtEvent {
  id:                string;
  name:              string;
  description:       string;
  image?:            TwtEventImage;
  venue:             TwtEventVenue;
  date:              string;
  startTime:         string;
  durationInMinutes: number;
  speakers:          TwtEventSpeaker[];
  organisers:        TwtEventOrganiser[];
  format?:           TwtEventFormat;
  tags:              TwtEventStream[];
  slug:              string;
  stream?:           TwtEventStream;
  homepage?:         boolean;
  boosted?:          boolean;
}

export interface TwtEventFormat {
  id:         string;
  name:       string;
  social?:    boolean;
  practical?: boolean;
  arts?:      boolean;
}

export interface TwtEventImage {
  imageUrl: string;
}

export interface TwtEventOrganiser {
  id:           string;
  name:         string;
  description?: string;
  twitter?:     string;
  website?:     string;
}

export interface TwtEventSpeaker {
  id:        string;
  name:      string;
  bio?:      string;
  shortBio?: string;
  twitter?:  string;
}

export interface TwtEventStream {
  id:   string;
  name: string;
}

export interface TwtEventVenue {
  id:           string;
  name:         string;
  description?: string;
}


@Service()
export class TwtApiClient {
  private cache = new RepositoryCache({ ttl: 60_000 })

  findAll(festival: string): Promise<TwtEvent[]> {
    return this.cache.resolve('findAll', { festival }, async () => {
      const res = await fetch(`https://api.theworldtransformed.org/festival/${festival}/event`)
      if (!res.ok) {
        throw Error(await res.text())
      }

      return res.json()
    })
  }
}
